!<arch>
0-isupper.c/    0           0     0     644     240       `
a#include "main.h"

/**
  * _isupper - a function that checks for uppercase character
  *
  * @c: prints c
  *
  * Return: 0
  */
int _isupper(int c)
{
	int n = 'A';
	int k = 'Z';

	if (c >= n && c <= k)
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     286       `
#include "main.h"
/**
  * _memset -  a function that fills memory with a constant byte
  * @s: pointer
  * @b: character
  * @n: integer
  * Return: char
  */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0 ; i < n ; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     337       `
#include "main.h"

/**
  * _strcat - a function that concatenates two strings
  *
  * @dest: a pointer
  *
  * @src: a pointer
  *
  * Return: 0
  */
char *_strcat(char *dest, char *src)
{
	int n1 = 0;
	int n2 = 0;

	while (dest[n1] != 0)
	{
		n1++;
	}
	while (src[n2] != 0)
	{
		dest[n1] = src[n2];
		n2++;
		n1++;
	}
	return (dest);
}

100-atoi.c/     0           0     0     644     398       `
#include "main.h"

/**
  * _atoi - convert str to int
  * @s: the string
  *
  * Return: the number in integer
  */
int _atoi(char *s)
{
	unsigned int num = 0;
	int i = 0;
	int sign = 1;

	while (*(s + i))
	{
		if (*(s + i) == '-')
			sign *= -1;
		else if (*(s + i) >= '0' && *(s + i) <= '9')
			num = (num * 10) + (*(s + i) - '0');
		else if (num > 0)
			break;
		i++;
	}
	return (num * sign);
}
1-isdigit.c/    0           0     0     644     239       `
#include "main.h"
/**
  * _isdigit -  a function that checks for a digit 0 through 9
  *
  * @c: prints c
  *
  * Return: 0
  */
int _isdigit(int c)
{
	int n = '0';
	int k = '9';

	if (c >= n && c <= k)
		return (1);
	else
		return (0);
}

1-strncat.c/    0           0     0     644     395       `
#include "main.h"

/**
  * _strncat - a function that concatenates two strings
  *
  * @dest: a pointer
  *
  * @src: a pointer
  *
  * @n: integer
  *
  * Return: 0
  */
char *_strncat(char *dest, char *src, int n)
{
	int n1 = 0;
	int n2 = 0;

	while (dest[n1] != 0)
	{
		n1++;
	}
	while (n2 != n && src[n2] != 0)
	{
		dest[n1] = src[n2];
		n2++;
		n1++;
	}
	dest[n1] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     349       `
#include "main.h"

/**
  * _strchr - locates a character in a string
  * @s: the string
  * @c: the character
  *
  * Return: pointer to the first accurrence of the character c
  */
char *_strchr(char *s, char c)
{
	int i = 0;

	while (s[i] != 0)
	{
		if (s[i] == c)
			return (s + i);
		i++;
	}
	if (c == 0)
		return (s + i);
	else
		return (0);
}

2-strlen.c/     0           0     0     644     229       `
#include "main.h"

/**
  * _strlen - a function that returns the length of a string
  *
  * @s: a pointer
  *
  * Return: always 0 (success)
  */
int _strlen(char *s)
{
	int i = 0;

	while (s[i] != 0)
	{
		i++;
	}
	return (i);
}

3-islower.c/    0           0     0     644     297       `
#include "main.h"
/**
  * _islower - a function that checks for lowercase character.
  *
  * @c: This is longer description of C
  *
  * Return: reurn 0 if its upper case and 1 if its lower case
  */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     250       `
#include <stdio.h>
/**
  * _puts -  a function that prints a string, followed by a new line
  *
  * @str: a pointer
  *
  * Return: void
  */
void _puts(char *str)
{
	int i = 0;

	while (str[i] != 0)
	{
		putchar(str[i]);
		i++;
	}
	putchar('\n');
}
3-strcmp.c/     0           0     0     644     324       `
#include "main.h"
/**
 * _strcmp - compare 2 strings.
 * @s1: string to be compared.
 * @s2: string for comparation.
 * Return: Difference.
 */
int _strcmp(char *s1, char *s2)
{
	while ((*s1 != '\0' && *s2 != '\0') && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	if (*s1 == *s2)
	{
		return (0);
	}
	else
	{
	return (*s1 - *s2);
	}
}
3-strspn.c/     0           0     0     644     515       `
#include "main.h"
/**
 * _strspn - gets the length of a prefix substring
 *
 * @s: segment to return bytes from
 * @accept: the bytes to include
 *
 * Return: the number of bytes in the initial segment of @s which consist only
 * of bytes from @accept
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, j;
	int c = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] != 32)
		{
			for (j = 0; accept[j] != '\0'; j++)
			{
				if (s[i] == accept[j])
					c++;
			}
		}
		else
			return (c);

	}
	return (c);
}

4-isalpha.c/    0           0     0     644     323       `
#include "main.h"
/**
  * _isalpha - a function that checks for alphabetic character
  *
  * @c: This is longer description of C
  *
  * Return: it returns 1 if it's a lower case or upper case
  */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

4-strpbrk.c/    0           0     0     644     461       `
#include <stdio.h>
#include "main.h"
/**
 * _strpbrk - searchs a string for any of a set of bytes
 *
 * @s: the string to search
 * @accept: the bytes to search for
 *
 * Return: a pointer to the byte in @s that matches one of the bytes in
 * @accept, or NULL if no such byte is found.
 */

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
				return (s);
		}
		s++;
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     550       `
#include <stdio.h>
#include "main.h"
/**
* _strstr - locates a substring
*
* @haystack: the longer string to search
* @needle: the substring to search for
*
* Return: a pointer to the beginning of the located substring, or NULL if
* the substring is not found.
*/

char *_strstr(char *haystack, char *needle)
{
	int i;
	int s = 0;

	while (needle[s] != '\0')
		s++;

	while (*haystack)
	{
		for (i = 0; needle[i]; i++)
		{
			if (haystack[i] != needle[i])
				break;
		}
		if (i != s)
			haystack++;
		else
			return (haystack);
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     241       `
#include "main.h"
/**
  * _abs - a function that computes the absolute value of an integer
  *
  * @n: The integer to be computed
  *
  * Return: always 0 (success)
  */
int _abs(int n)
{
	if (n < 0)
	{
		return (n * -1);
	}
	return (n);

}

9-strcpy.c/     0           0     0     644     317       `
#include "main.h"

/**
  * _strcpy - copys str to another
  * @dest: destination string
  * @src: the str that we gonna copy
  *
  * Return: the pointer to dst
  */
char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (*(src + i))
	{
		*(dest + i) = *(src + i);
		i++;
	}
	*(dest + i) = '\0';
	return (dest);
}

memcpy.c/       0           0     0     644     293       `
#include "main.h"
/**
  * _memcpy - a function that copies memory area
  * @dest: charcter
  * @src: character
  * @n: integer
  * Return: char
  */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0 ; i < n ; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

_putchar.c/     0           0     0     644     198       `
#include <unistd.h>

/**
  * _putchar - function that prints one character
  * @n: a character that we want to print
  *
  * Return: (1)
  */
int _putchar(char n)
{
	write(1, &n, 1);
	return (1);
}
